type t

type selections

type diagnostics

val create :
  ?test:OpamPackage.Name.Set.t ->
  constraints:OpamFormula.version_constraint OpamTypes.name_map ->
  OpamStateTypes.unlocked OpamStateTypes.switch_state ->
  t
(** [create ~constraints switch] is a solver that gets candidates from [switch], filtering them
    using [constraints].
    @param test Packages for which we should include "with-test" dependencies. *)

val solve : t -> OpamPackage.Name.t list -> (selections, diagnostics) result
(** [solve t package_names] finds a compatible set of package versions that
    includes all packages in [package_names] and their required dependencies. *)

val packages_of_result : selections -> OpamPackage.t list

val diagnostics : ?verbose:bool -> diagnostics -> string
(** [diagnostics d] is a message explaining why [d] failed, generated by
    performing another solve which doesn't abort on failure. *)
